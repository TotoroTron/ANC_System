-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\LMSUpdateTester\LMSUpdate.vhd
-- Created: 2020-10-27 12:50:41
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LMSUpdate
-- Source Path: LMSUpdateTester/LMSUpdateSystem/LMSUpdate
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.top_level_pkg.ALL;
----
ENTITY LMSUpdate IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        X                                 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En24
        E                                 :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En24
        Adapt                             :   IN    std_logic;
        W                                 :   OUT   vector_of_std_logic_vector24(0 TO 11)  -- sfix24_En24 [12]
        );
END LMSUpdate;


ARCHITECTURE rtl OF LMSUpdate IS

  -- Signals
  SIGNAL X_signed                         : signed(23 DOWNTO 0);  -- sfix24_En24
  SIGNAL E_signed                         : signed(23 DOWNTO 0);  -- sfix24_En24
  SIGNAL W_tmp                            : vector_of_signed24(0 TO 11);  -- sfix24_En24 [12]
  SIGNAL xBuffer                          : vector_of_signed24(0 TO 11);  -- sfix24 [12]
  SIGNAL wBuffer                          : vector_of_signed24(0 TO 11);  -- sfix24 [12]
  SIGNAL xBuffer_next                     : vector_of_signed24(0 TO 11);  -- sfix24_En24 [12]
  SIGNAL wBuffer_next                     : vector_of_signed24(0 TO 11);  -- sfix24_En24 [12]

BEGIN
  X_signed <= signed(X);

  E_signed <= signed(E);

  LMSUpdate_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xBuffer <= (OTHERS => to_signed(16#000000#, 24));
      wBuffer <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xBuffer <= xBuffer_next;
        wBuffer <= wBuffer_next;
      END IF;
    END IF;
  END PROCESS LMSUpdate_1_process;

  LMSUpdate_1_output : PROCESS (Adapt, E_signed, X_signed, wBuffer, xBuffer)
    VARIABLE c : signed(47 DOWNTO 0);
    VARIABLE xBuffer_temp : vector_of_signed24(0 TO 11);
    VARIABLE wBuffer_temp : vector_of_signed24(0 TO 11);
    VARIABLE add_cast : vector_of_signed73(0 TO 11);
    VARIABLE mul_temp : vector_of_signed72(0 TO 11);
    VARIABLE add_cast_0 : vector_of_signed73(0 TO 11);
    VARIABLE add_temp : vector_of_signed73(0 TO 11);
  BEGIN
    xBuffer_temp := xBuffer;
    wBuffer_temp := wBuffer;
    -- W = weights
    -- X = input
    -- E = error
    -- mu = step size
    -- L = length
    -- X delay pipeline
    -- W delay pipeline
    xBuffer_temp(1 TO 11) := xBuffer(0 TO 10);
    xBuffer_temp(0) := X_signed;
    IF Adapt = '1' THEN 
      c := resize(E_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 48);

      FOR t_0 IN 0 TO 11 LOOP
        add_cast(t_0) := resize(wBuffer(t_0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 73);
        mul_temp(t_0) := c * xBuffer_temp(t_0);
        add_cast_0(t_0) := resize(mul_temp(t_0), 73);
        add_temp(t_0) := add_cast(t_0) + add_cast_0(t_0);
        IF ((add_temp(t_0)(72) = '0') AND (add_temp(t_0)(71 DOWNTO 70) /= "00")) OR ((add_temp(t_0)(72) = '0') AND (add_temp(t_0)(70 DOWNTO 47) = X"7FFFFF")) THEN 
          wBuffer_temp(t_0) := X"7FFFFF";
        ELSIF (add_temp(t_0)(72) = '1') AND (add_temp(t_0)(71 DOWNTO 70) /= "11") THEN 
          wBuffer_temp(t_0) := X"800000";
        ELSE 
          wBuffer_temp(t_0) := add_temp(t_0)(70 DOWNTO 47) + ('0' & add_temp(t_0)(46));
        END IF;
      END LOOP;

    END IF;
    W_tmp <= wBuffer_temp;
    xBuffer_next <= xBuffer_temp;
    wBuffer_next <= wBuffer_temp;
  END PROCESS LMSUpdate_1_output;


  outputgen: FOR k IN 0 TO 11 GENERATE
    W(k) <= std_logic_vector(W_tmp(k));
  END GENERATE;

END rtl;

