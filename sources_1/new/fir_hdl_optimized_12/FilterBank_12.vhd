-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\fir_filter_hdl_optimized_12\FilterBank_12.vhd
-- Created: 2020-11-19 01:58:56
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FilterBank_12
-- Source Path: fir_filter_hdl_optimized_12/Subsystem_12/Discrete FIR Filter HDL Optimized 12/FilterBank_12
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.top_level_pkg.ALL;

ENTITY FilterBank_12 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En24
        validIn                           :   IN    std_logic;
        Coeff                             :   IN    vector_of_std_logic_vector24(0 TO 11);  -- sfix24_En24 [12]
        syncReset                         :   IN    std_logic;
        dataOut                           :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En24
        validOut                          :   OUT   std_logic
        );
END FilterBank_12;


ARCHITECTURE rtl OF FilterBank_12 IS

  -- Component Declarations
  COMPONENT subFilter_12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinReg2_0_re                    :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En24
          coefIn                          :   IN    vector_of_std_logic_vector24(0 TO 11);  -- sfix24_En24 [12]
          dinRegVld                       :   IN    std_logic;
          syncReset                       :   IN    std_logic;
          dout_1_re                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En24
          doutVld                         :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : subFilter_12
    USE ENTITY work.subFilter_12(rtl);

  -- Signals
  SIGNAL dinRegVld                        : std_logic;
  SIGNAL dataIn_signed                    : signed(23 DOWNTO 0);  -- sfix24_En24
  SIGNAL dinReg_0_re                      : signed(23 DOWNTO 0);  -- sfix24_En24
  SIGNAL Coeff_signed                     : vector_of_signed24(0 TO 11);  -- sfix24_En24 [12]
  SIGNAL coeffIn_signed                   : vector_of_signed24(0 TO 11);  -- sfix24_En24 [12]
  SIGNAL CoefReg1                         : vector_of_signed24(0 TO 11);  -- sfix24_En24 [12]
  SIGNAL dinReg2_0_re                     : signed(23 DOWNTO 0);  -- sfix24_En24
  SIGNAL CoefReg2                         : vector_of_signed24(0 TO 11);  -- sfix24_En24 [12]
  SIGNAL CoefReg2_1                       : vector_of_std_logic_vector24(0 TO 11);  -- ufix24 [12]
  SIGNAL dinReg2Vld                       : std_logic;
  SIGNAL dout_1_re                        : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL doutVld                          : std_logic;

BEGIN
  u_subFilter_12_1_re : subFilter_12
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinReg2_0_re => std_logic_vector(dinReg2_0_re),  -- sfix24_En24
              coefIn => CoefReg2_1,  -- sfix24_En24 [12]
              dinRegVld => dinReg2Vld,
              syncReset => syncReset,
              dout_1_re => dout_1_re,  -- sfix24_En24
              doutVld => doutVld
              );

  intdelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinRegVld <= '0';
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinRegVld <= '0';
        ELSE 
          dinRegVld <= validIn;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  dataIn_signed <= signed(dataIn);

  intdelay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg_0_re <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg_0_re <= to_signed(16#000000#, 24);
        ELSIF validIn = '1' THEN
          dinReg_0_re <= dataIn_signed;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  outputgen1: FOR k IN 0 TO 11 GENERATE
    Coeff_signed(k) <= signed(Coeff(k));
  END GENERATE;

  coeffIn_signed <= Coeff_signed;

  intdelay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        CoefReg1 <= (OTHERS => to_signed(16#000000#, 24));
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          CoefReg1 <= (OTHERS => to_signed(16#000000#, 24));
        ELSIF validIn = '1' THEN
          CoefReg1 <= coeffIn_signed;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg2_0_re <= to_signed(16#000000#, 24);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg2_0_re <= to_signed(16#000000#, 24);
        ELSIF dinRegVld = '1' THEN
          dinReg2_0_re <= dinReg_0_re;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  intdelay_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        CoefReg2 <= (OTHERS => to_signed(16#000000#, 24));
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          CoefReg2 <= (OTHERS => to_signed(16#000000#, 24));
        ELSIF dinRegVld = '1' THEN
          CoefReg2 <= CoefReg1;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  outputgen: FOR k IN 0 TO 11 GENERATE
    CoefReg2_1(k) <= std_logic_vector(CoefReg2(k));
  END GENERATE;

  intdelay_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dinReg2Vld <= '0';
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          dinReg2Vld <= '0';
        ELSE 
          dinReg2Vld <= dinRegVld;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  dataOut <= dout_1_re;

  validOut <= doutVld;

END rtl;

